# SBOM Validation CI Workflow
# Validates Software Bill of Materials for all plugins

name: SBOM Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'plugs/**'
      - 'pipes/**'
      - 'glues/**'
      - '.github/workflows/sbom-validation.yaml'
      - 'cores/sbom/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'plugs/**'
      - 'pipes/**'
      - 'glues/**'
  workflow_dispatch:

jobs:
  sbom-validation:
    name: SBOM Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run SBOM Validation (Using pp sbom CLI)
        id: sbom_validation
        run: |
          echo "üîç Running SBOM validation using pp sbom commands..."

          # Use existing PlugPipe SBOM functionality
          # Validate all plugins have SBOM files
          echo "Checking SBOM coverage..." > /tmp/sbom_report.txt

          # Count plugins and SBOMs
          TOTAL_PLUGINS=$(find plugs pipes glues -name "plug.yaml" -o -name "pipe.yaml" -o -name "glue.yaml" 2>/dev/null | wc -l)
          PLUGINS_WITH_SBOM=$(find plugs pipes glues -name "sbom-complete.json" 2>/dev/null | wc -l)

          echo "Total plugins: $TOTAL_PLUGINS" >> /tmp/sbom_report.txt
          echo "Plugins with SBOM: $PLUGINS_WITH_SBOM" >> /tmp/sbom_report.txt

          COVERAGE=$(( PLUGINS_WITH_SBOM * 100 / TOTAL_PLUGINS ))
          echo "SBOM Coverage: ${COVERAGE}%" >> /tmp/sbom_report.txt

          # Validate SBOM format for plugins (sample check)
          echo "" >> /tmp/sbom_report.txt
          echo "Validating SBOM format..." >> /tmp/sbom_report.txt

          VALIDATION_ERRORS=0

          # Check first 10 SBOM files for format validity
          find plugs pipes glues -name "sbom-complete.json" | head -10 | while read sbom_file; do
            if ! python3 -c "import json; json.load(open('$sbom_file'))" 2>/dev/null; then
              echo "‚ùå Invalid JSON: $sbom_file" >> /tmp/sbom_report.txt
              VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
            fi
          done

          # Display report
          cat /tmp/sbom_report.txt

          # Save to output
          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/sbom_report.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Pass if coverage > 50% (non-blocking for now)
          if [ $COVERAGE -lt 50 ]; then
            echo "‚ö†Ô∏è  Warning: SBOM coverage below 50%"
            exit 0  # Non-blocking
          fi

          echo "‚úÖ SBOM validation passed"
          exit 0

      - name: Check SBOM Coverage
        if: success()
        run: |
          echo "üìä Analyzing SBOM coverage..."

          # Count plugins with SBOM
          PLUGINS_WITH_SBOM=$(find plugs pipes glues -name "sbom-complete.json" 2>/dev/null | wc -l)
          TOTAL_PLUGINS=$(find plugs pipes glues -name "plug.yaml" -o -name "pipe.yaml" -o -name "glue.yaml" 2>/dev/null | wc -l)

          echo "Plugins with SBOM: $PLUGINS_WITH_SBOM"
          echo "Total plugins: $TOTAL_PLUGINS"

          COVERAGE=$(( PLUGINS_WITH_SBOM * 100 / TOTAL_PLUGINS ))
          echo "SBOM Coverage: ${COVERAGE}%"

          # Warning if coverage < 80%
          if [ $COVERAGE -lt 80 ]; then
            echo "‚ö†Ô∏è  Warning: SBOM coverage below 80%"
          else
            echo "‚úÖ SBOM coverage acceptable"
          fi

      - name: Validate SBOM Format (Sample Check)
        run: |
          echo "üîç Validating SBOM format for sample plugins..."

          # Check first 5 SBOM files
          find plugs pipes glues -name "sbom-complete.json" | head -5 | while read sbom_file; do
            echo "Checking $sbom_file..."

            # Basic JSON validation
            if python3 -c "import json; json.load(open('$sbom_file'))" 2>/dev/null; then
              echo "  ‚úÖ Valid JSON"

              # Check for required fields
              if python3 -c "import json; sbom=json.load(open('$sbom_file')); exit(0 if 'bomFormat' in sbom or 'spdxVersion' in sbom else 1)" 2>/dev/null; then
                echo "  ‚úÖ Valid SBOM format"
              else
                echo "  ‚ö†Ô∏è  Missing SBOM format identifier"
              fi
            else
              echo "  ‚ùå Invalid JSON"
            fi
          done

      - name: Check Security Plugin SBOM Annotations
        run: |
          echo "üîí Checking security annotations in security plugins..."

          # Find security/MCP plugins
          SECURITY_PLUGINS=$(find plugs/security plugs/mcp -name "sbom-complete.json" 2>/dev/null | head -10)

          if [ -z "$SECURITY_PLUGINS" ]; then
            echo "No security plugins found with SBOM"
            exit 0
          fi

          for sbom_file in $SECURITY_PLUGINS; do
            plugin_name=$(dirname "$sbom_file")
            echo "Checking $plugin_name..."

            # Check for security metadata
            if python3 -c "
          import json
          import sys
          with open('$sbom_file') as f:
              sbom = json.load(f)
          metadata = sbom.get('metadata', {})
          properties = metadata.get('properties', [])
          security_props = [p for p in properties if 'security' in p.get('name', '').lower()]
          sys.exit(0 if security_props else 1)
          " 2>/dev/null; then
              echo "  ‚úÖ Has security annotations"
            else
              echo "  ‚ö†Ô∏è  Missing security annotations (recommended)"
            fi
          done

      - name: Upload SBOM Validation Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: sbom-validation-report
          path: /tmp/sbom_report.txt
          retention-days: 30

      - name: Comment PR with SBOM Issues (if PR)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('/tmp/sbom_report.txt', 'utf8');

            const comment = `## ‚ùå SBOM Validation Failed

            This PR introduces plugins without proper SBOM (Software Bill of Materials) files.

            <details>
            <summary>View SBOM Validation Report</summary>

            \`\`\`
            ${report}
            \`\`\`

            </details>

            ### How to Fix

            **Generate SBOM for your plugin:**
            \`\`\`bash
            ./pp sbom generate plugs/category/your_plugin/1.0.0
            \`\`\`

            **Enhance SBOM with security annotations (for security plugins):**
            \`\`\`bash
            ./pp sbom enhance plugs/security/your_plugin/1.0.0
            \`\`\`

            **Batch enhance all MCP security plugins:**
            \`\`\`bash
            ./pp sbom enhance --batch-enhance-mcp-security
            \`\`\`

            ### SBOM Requirements

            All plugins must include:
            - \`sbom/sbom-complete.json\` (required)
            - \`sbom/lib_sbom.json\` (recommended)
            - Valid CycloneDX or SPDX format
            - Security annotations (for security/MCP plugins)
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: comment
            });

      - name: Generate Summary
        if: always()
        run: |
          echo ""
          echo "=" * 60
          echo "üìä SBOM Validation Summary"
          echo "=" * 60
          echo ""
          echo "All plugins should include SBOM files to document dependencies"
          echo "and enable vulnerability tracking."
          echo ""
          echo "SBOM files required:"
          echo "  - sbom/sbom-complete.json (CycloneDX or SPDX format)"
          echo "  - sbom/lib_sbom.json (library dependencies)"
          echo ""
          echo "For security plugins, SBOM should include security annotations."
          echo ""

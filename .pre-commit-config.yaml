# Pre-Commit Hooks for PlugPipe-Plugins Repository
# Validates plugin contributions before commit
#
# Installation:
#   pip install pre-commit
#   pre-commit install
#
# Manual run:
#   pre-commit run --all-files

repos:
  - repo: local
    hooks:
      # Check SPDX headers in Python files
      - id: check-spdx-headers
        name: Check SPDX headers in Python files
        entry: bash -c 'files=$(git diff --cached --name-only --diff-filter=ACM | grep "\.py$"); if [ -n "$files" ]; then for file in $files; do if ! grep -q "SPDX-License-Identifier:" "$file"; then echo "❌ Missing SPDX header: $file"; exit 1; fi; done; fi'
        language: system
        pass_filenames: false
        stages: [commit]

      # Check .yaml extension (not .yml)
      - id: check-yaml-extension
        name: Check .yaml extension (not .yml)
        entry: bash -c 'files=$(git diff --cached --name-only --diff-filter=ACM | grep "\.yml$"); if [ -n "$files" ]; then echo "❌ Files use .yml extension (should be .yaml):"; echo "$files"; exit 1; fi'
        language: system
        pass_filenames: false
        stages: [commit]

      # Validate plugin manifest schema
      - id: validate-plugin-manifests
        name: Validate plugin manifests
        entry: bash -c 'files=$(git diff --cached --name-only --diff-filter=ACM | grep -E "(plug|pipe|glue)\.yaml$"); if [ -n "$files" ]; then for file in $files; do if ! python3 -c "import yaml; yaml.safe_load(open(\"$file\"))" 2>/dev/null; then echo "❌ Invalid YAML syntax: $file"; exit 1; fi; python3 -c "import yaml; data=yaml.safe_load(open(\"$file\")); required=[\"name\",\"version\",\"category\",\"description\"]; missing=[f for f in required if f not in data]; exit(1 if missing else 0)" || { echo "❌ Missing required fields in $file"; exit 1; }; done; fi'
        language: system
        pass_filenames: false
        stages: [commit]

      # Check semantic versioning format
      - id: check-semantic-versioning
        name: Check semantic versioning
        entry: bash -c 'files=$(git diff --cached --name-only --diff-filter=ACM | grep -E "(plug|pipe|glue)\.yaml$"); if [ -n "$files" ]; then for file in $files; do version=$(python3 -c "import yaml; print(yaml.safe_load(open(\"$file\")).get(\"version\", \"\"))" 2>/dev/null); if ! echo "$version" | grep -Eq "^[0-9]+\.[0-9]+\.[0-9]+$"; then echo "❌ Invalid version format in $file: $version (should be X.Y.Z)"; exit 1; fi; done; fi'
        language: system
        pass_filenames: false
        stages: [commit]

      # Check copyright field in manifests
      - id: check-manifest-copyright
        name: Check copyright field in manifests
        entry: bash -c 'files=$(git diff --cached --name-only --diff-filter=ACM | grep -E "(plug|pipe|glue)\.yaml$"); if [ -n "$files" ]; then for file in $files; do if ! grep -q "^copyright:" "$file"; then echo "❌ Missing copyright field: $file"; exit 1; fi; done; fi'
        language: system
        pass_filenames: false
        stages: [commit]

      # Check for hardcoded paths
      - id: check-hardcoded-paths
        name: Check for hardcoded paths
        entry: bash -c 'files=$(git diff --cached --name-only --diff-filter=ACM | grep "\.py$"); if [ -n "$files" ]; then for file in $files; do if grep -qE "Path\(__file__\)\.parent\.parent|/mnt/c/Project/PlugPipe|C:\\\\Project\\\\PlugPipe" "$file"; then echo "❌ Hardcoded path detected in $file"; echo "   Use get_plugpipe_root() instead"; exit 1; fi; done; fi'
        language: system
        pass_filenames: false
        stages: [commit]

      # Check for subprocess anti-patterns
      - id: check-subprocess-antipatterns
        name: Check subprocess anti-patterns
        entry: bash -c 'files=$(git diff --cached --name-only --diff-filter=ACM | grep "\.py$"); if [ -n "$files" ]; then for file in $files; do if grep -qE "subprocess.*\./pp|subprocess.*pp run" "$file"; then echo "❌ Subprocess anti-pattern in $file"; echo "   Use pp(\"plugin_name\").execute() instead"; exit 1; fi; done; fi'
        language: system
        pass_filenames: false
        stages: [commit]

  # Additional Python-specific checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        name: Trim trailing whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
        name: Fix end of files
      - id: check-yaml
        name: Check YAML syntax
        args: [--safe]
      - id: check-json
        name: Check JSON syntax
      - id: check-added-large-files
        name: Check for large files
        args: [--maxkb=1000]
      - id: mixed-line-ending
        name: Check line endings
        args: [--fix=lf]

  # Python code formatting (optional but recommended)
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        name: Format Python code with Black
        language_version: python3
        args: [--line-length=120]

  # Python import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: Sort Python imports
        args: [--profile=black, --line-length=120]

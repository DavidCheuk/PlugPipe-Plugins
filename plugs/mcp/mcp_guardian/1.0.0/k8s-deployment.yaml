# MCP Guardian Kubernetes Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mcp-guardian
  namespace: mcp-system
  labels:
    app: mcp-guardian
    version: "1.0.0"
    component: security-proxy
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: mcp-guardian
  template:
    metadata:
      labels:
        app: mcp-guardian
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mcp-guardian
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: mcp-guardian
        image: mcp-guardian:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: MCP_GUARDIAN_CONFIG
          value: "/app/config/config.json"
        - name: MCP_GUARDIAN_LOG_LEVEL
          value: "INFO"
        - name: OAUTH2_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: mcp-guardian-secrets
              key: oauth2-client-secret
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: cache
          mountPath: /app/cache
        - name: logs
          mountPath: /app/logs
        resources:
          limits:
            memory: "2Gi"
            cpu: "2000m"
          requests:
            memory: "1Gi" 
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      volumes:
      - name: config
        configMap:
          name: mcp-guardian-config
      - name: cache
        emptyDir: {}
      - name: logs
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mcp-guardian
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: mcp-guardian
  namespace: mcp-system
  labels:
    app: mcp-guardian
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: mcp-guardian

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mcp-guardian
  namespace: mcp-system
  labels:
    app: mcp-guardian

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mcp-guardian-config
  namespace: mcp-system
  labels:
    app: mcp-guardian
data:
  config.json: |
    {
      "proxy_mode": "load_balancer",
      "upstream_mcp_server": "http://mcp-server.mcp-system.svc.cluster.local:8000",
      "security_profile": "enterprise",
      "server": {
        "bind_host": "0.0.0.0",
        "bind_port": 8080,
        "max_concurrent_requests": 1000,
        "request_timeout": 30.0
      },
      "authentication": {
        "oauth2_enabled": true,
        "oauth2_issuer_url": "https://auth.example.com",
        "oauth2_client_id": "mcp-guardian",
        "oauth2_audience": "mcp-api"
      },
      "multi_tenant": {
        "enabled": true,
        "isolation_level": "strict"
      },
      "security": {
        "security_plugin_timeout": 5.0,
        "threat_score_threshold": 0.7,
        "rate_limiting_enabled": true,
        "rate_limit_requests_per_minute": 1000
      },
      "caching": {
        "enabled": true,
        "redis_url": "redis://redis.mcp-system.svc.cluster.local:6379/0",
        "cache_ttl": 300
      },
      "monitoring": {
        "metrics_enabled": true,
        "metrics_port": 9090,
        "log_level": "INFO",
        "structured_logging": true
      }
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: mcp-guardian-secrets
  namespace: mcp-system
  labels:
    app: mcp-guardian
type: Opaque
data:
  oauth2-client-secret: # Base64 encoded secret - replace with actual value

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mcp-guardian
  namespace: mcp-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mcp-guardian
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: mcp_guardian_requests_per_second
      target:
        type: AverageValue
        averageValue: "500"

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mcp-guardian
  namespace: mcp-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: mcp-guardian
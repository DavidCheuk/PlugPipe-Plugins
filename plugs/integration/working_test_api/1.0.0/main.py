#!/usr/bin/env python3
# SPDX-License-Identifier: MIT
# Copyright (c) 2025 PlugPipe Team / Yu Ming Cheuk
# This file is part of PlugPipe - https://github.com/PlugPipe/PlugPipe

"""
Generated Plugin for working_test API Integration
Auto-generated by PlugPipe Enhanced Plugin Creation Agent
"""

import requests
import logging
from typing import Dict, Any
import time

logger = logging.getLogger(__name__)

def process(ctx: Dict[str, Any], cfg: Dict[str, Any]) -> Dict[str, Any]:
    """
    ULTIMATE FIX PATTERN: Real functional plugin for working_test
    """
    start_time = time.time()

    try:
        # ULTIMATE INPUT EXTRACTION
        operation = "health_check"
        endpoint = ""
        api_key = ""

        # Check cfg first (CLI input)
        if isinstance(cfg, dict):
            operation = cfg.get('operation', operation)
            endpoint = cfg.get('endpoint', '')
            api_key = cfg.get('api_key', '')

        # Check ctx second (MCP input)
        if not endpoint and isinstance(ctx, dict):
            operation = ctx.get('operation', operation)
            endpoint = ctx.get('endpoint', '')
            api_key = ctx.get('api_key', '')

        # Real API interaction based on operation
        base_url = "https://jsonplaceholder.typicode.com"
        headers = {"Content-Type": "application/json"}
        if api_key:
            headers["Authorization"] = f"Bearer {api_key}"

        if operation == "health_check":
            try:
                response = requests.get(f"{base_url}/health", headers=headers, timeout=5)
                return {
                    'status': 'success',
                    'operation': 'health_check',
                    'api_status': 'reachable' if response.status_code < 400 else 'error',
                    'status_code': response.status_code,
                    'processing_time_ms': (time.time() - start_time) * 1000,
                    'plugin_type': 'real_generated_plugin'
                }
            except requests.RequestException as e:
                return {
                    'status': 'error',
                    'operation': 'health_check',
                    'error': f'API unreachable: {str(e)}',
                    'processing_time_ms': (time.time() - start_time) * 1000,
                    'plugin_type': 'real_generated_plugin'
                }

        elif operation == "list":
            try:
                response = requests.get(f"{base_url}/{endpoint or 'posts'}", headers=headers, timeout=10)
                data = response.json() if response.status_code < 400 else {'error': 'Failed to fetch'}
                return {
                    'status': 'success',
                    'operation': 'list',
                    'data': data,
                    'count': len(data) if isinstance(data, list) else 0,
                    'processing_time_ms': (time.time() - start_time) * 1000,
                    'plugin_type': 'real_generated_plugin'
                }
            except Exception as e:
                return {
                    'status': 'error',
                    'operation': 'list',
                    'error': str(e),
                    'processing_time_ms': (time.time() - start_time) * 1000,
                    'plugin_type': 'real_generated_plugin'
                }

        else:
            return {
                'status': 'error',
                'error': f'Unknown operation: {operation}',
                'supported_operations': ['health_check', 'list'],
                'processing_time_ms': (time.time() - start_time) * 1000,
                'plugin_type': 'real_generated_plugin'
            }

    except Exception as e:
        return {
            'status': 'error',
            'error': str(e),
            'plugin_name': 'working_test_plugin',
            'processing_time_ms': (time.time() - start_time) * 1000,
            'plugin_type': 'real_generated_plugin'
        }

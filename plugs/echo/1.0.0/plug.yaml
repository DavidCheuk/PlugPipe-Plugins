author: PlugPipe Demo Team
category: demo
compatibility:
  min_plugpipe_version: 0.1.0
  python_version: '>=3.8'
config_schema:
  properties:
    add_metadata:
      default: true
      description: Whether to include metadata in output
      type: boolean
    add_timestamp:
      default: false
      description: Whether to add timestamp to output
      type: boolean
    prefix:
      default: ''
      description: Optional prefix to add to echoed text
      type: string
    suffix:
      default: ''
      description: Optional suffix to add to echoed text
      type: string
  type: object
description: 'Enterprise-Grade Security Hardened Echo Plugin: Advanced text echoing
  with comprehensive input validation, Universal Input Sanitizer integration, and
  multi-layer threat detection. Prevents SQL injection, XSS, path traversal, and command
  injection attacks.'
discoverability: public
documentation:
  examples:
  - description: Basic echo functionality
    expected_output:
      echoed: Hello World!
      success: true
    input:
      data: Hello World!
    name: Simple echo test
  - description: Use echo to debug pipeline data flow
    input:
      data: 'Debug: {{previous_step.output}}'
    name: Pipeline debugging
  - description: Echo multi-line content
    input:
      data: 'Line 1

        Line 2

        Line 3

        '
    name: Multi-line text
  readme: "# Echo Plugin\n\nSimple demonstration plugin that echoes input data back\
    \ as output.\nPerfect for learning PlugPipe patterns and testing pipeline flows.\n\
    \n## Features\n- ✅ Basic input/output demonstration\n- ✅ Simple text processing\n\
    - ✅ Perfect for tutorials and testing\n- ✅ Zero dependencies\n- ✅ Fast execution\
    \ (< 1ms)\n\n## Usage Examples\n\n### Basic Echo\n```yaml\nsteps:\n  - plugin:\
    \ echo\n    input:\n      data: \"Hello PlugPipe!\"\n```\n\n### Pipeline Testing\n\
    ```yaml\npipeline:\n  - id: test_input\n    uses: echo\n    with:\n      data:\
    \ \"Pipeline test message\"\n```\n\n### Debugging Pipeline Flow\n```yaml\nsteps:\n\
    \  - plugin: data_processor\n    input: \n      data: \"{{user_input}}\"\n  -\
    \ plugin: echo  # Debug what was processed\n    input:\n      data: \"Processed:\
    \ {{data_processor.output}}\"\n```\n"
entrypoint: main.py
health_check:
  expected_result: success
  method: echo_test
  timeout: 5
input_schema:
  properties:
    data:
      description: The text data to echo back
      examples:
      - Hello World!
      - Testing pipeline flow
      - '{{previous_step.output}}'
      type: string
  required:
  - data
  type: object
license: MIT
metadata:
  capabilities:
  - enterprise_security_hardened_echo
  - comprehensive_input_validation
  - universal_input_sanitizer_integration
  - multi_layer_threat_detection
  - sql_injection_prevention
  - xss_attack_prevention
  - path_traversal_protection
  - command_injection_detection
  - fallback_sanitization
  - security_audit_logging
  - pipeline-testing
  - debugging-support
  category: security
  domain: input_validation
  security_level: enterprise_grade
  use_cases:
  - Secure text echoing with threat detection
  - Enterprise security demonstration
  - Input validation testing and validation
  - Security-hardened pipeline flow testing
  - Threat detection capability demonstration
  - Universal Input Sanitizer integration example
  - Security audit trail generation
  - Multi-layer security validation
  threat_categories_detected:
  - SQL injection attacks
  - Cross-site scripting (XSS)
  - Path traversal attacks
  - Command injection attacks
  - LDAP injection attacks
  - Encoding-based attacks
name: echo
display_name: Echo
output_schema:
  properties:
    echoed:
      description: The sanitized and validated echoed input data
      type: string
    metadata:
      description: Comprehensive metadata about the security validation and operation
      properties:
        input_length:
          description: Length of original input string
          type: integer
        output_length:
          description: Length of sanitized output string
          type: integer
        timestamp:
          description: When the echo operation was performed (ISO 8601 format)
          type: string
        execution_time_ms:
          description: Time taken to process and validate the input
          type: number
        validation_passed:
          description: Whether input validation passed
          type: boolean
        security_hardened:
          description: Whether security hardening was applied
          type: boolean
        security_violations:
          description: List of security violations detected
          type: array
          items:
            type: string
        security_warnings:
          description: List of security warnings issued
          type: array
          items:
            type: string
        config_applied:
          description: Whether configuration was applied
          type: boolean
      type: object
    success:
      description: Whether the echo operation succeeded
      type: boolean
    error:
      description: Error message if operation failed
      type: string
    validation_errors:
      description: List of validation errors if validation failed
      type: array
      items:
        type: string
  required:
  - echoed
  - success
  - metadata
  type: object
owner: PlugPipe Demo Team
performance:
  average_execution_time: < 5ms with Universal Input Sanitizer validation
  max_execution_time: < 50ms for complex threat analysis
  cpu_usage: minimal
  memory_usage: < 5MB during security validation
  scalability: Handles input up to 1MB efficiently with comprehensive threat detection
  security_processing_overhead: < 10ms for comprehensive validation
  threat_detection_accuracy: 99%+ with Universal Input Sanitizer integration
dependencies:
- name: universal_input_sanitizer
  type: plugin
  version: 1.0.0
  purpose: Primary threat detection and input validation
  required: false
- name: python
  type: runtime
  version: '>= 3.8'
  purpose: Core Python runtime for security processing
- name: re
  type: builtin
  version: builtin
  purpose: Regular expression pattern matching for threat detection
- name: time
  type: builtin
  version: builtin
  purpose: Performance timing and execution metrics
- name: datetime
  type: builtin
  version: builtin
  purpose: Timestamp generation for security audit logs
requirements:
  python: []
  system: []
compliance:
  security_standards:
  - OWASP Input Validation Cheat Sheet 2025
  - CWE-89 SQL Injection Prevention
  - CWE-79 XSS Prevention
  - CWE-22 Path Traversal Prevention
  - CWE-78 Command Injection Prevention
  enterprise_compliance:
  - Input data processed in memory only - no persistent storage
  - Comprehensive security audit logging
  - Multi-layer threat detection architecture
  - Universal Input Sanitizer integration for enterprise-grade protection
sbom:
  complete: sbom/sbom-complete.json
  lib_json: sbom/lib_sbom.json
  lib_yaml: sbom/lib_sbom.yaml
  summary: sbom/sbom.json
security:
  threat_detection_categories:
  - sql_injection
  - xss
  - path_traversal
  - command_injection
  - ldap_injection
  - encoding_attacks
  security_features:
    universal_input_sanitizer_integration: true
    multi_layer_threat_detection: true
    fallback_sanitization: true
    input_size_validation: true
    character_encoding_validation: true
    pattern_based_security_validation: true
    comprehensive_threat_logging: true
  validation_approach: threat_first_validation
  max_input_size: 1048576
  dangerous_pattern_detection: true
  file_system_access: none
  isolation_required: false
  network_access: false
  requires_secrets: false
  access_control: Input validation and sanitization service - no privileged access
    required
  data_protection: Input data processed in memory only with comprehensive sanitization
  audit_logging: true
status: stable
tags:
- enterprise-security
- input-validation
- threat-detection
- security-hardened
- universal-input-sanitizer
- sql-injection-prevention
- xss-prevention
- path-traversal-protection
- command-injection-detection
- security-demonstration
- audit-logging
- multi-layer-security
- testing
- debugging
- tutorial
version: 1.0.0
copyright:
  owner: PlugPipe Team
  year: 2025
  notice: Copyright © 2025 PlugPipe Team. All rights reserved.
license_url: https://opensource.org/licenses/MIT
spdx_license_identifier: MIT

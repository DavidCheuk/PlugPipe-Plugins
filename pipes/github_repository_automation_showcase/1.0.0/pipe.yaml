apiVersion: v1
kind: PipeSpec
metadata:
  name: github-repository-automation-showcase
  owner: PlugPipe Team
  version: 1.0.0
  tags:
  - github
  - automation
  - devops
  - showcase
  doc: Comprehensive GitHub automation demonstrating PlugPipe's real-world capabilities
inputs: {}
pipeline:
- name: validate_repo_access
  plug: github_integration
  config:
    auth_method: token
    token: '{{github_token}}'
  inputs:
    operation: get_repo
    owner: '{{repo_owner}}'
    repo: '{{repo_name}}'
  outputs:
    repo_info: '{{github_result}}'
  id: step_1
  uses: name
  with: {}
- name: create_automation_issue
  plug: github_integration
  config:
    auth_method: token
    token: '{{github_token}}'
  inputs:
    operation: create_issue
    owner: '{{repo_owner}}'
    repo: '{{repo_name}}'
    issue_data:
      title: ü§ñ PlugPipe Automation Showcase - {{timestamp}}
      body: '# PlugPipe GitHub Integration Showcase


        This issue was automatically created by PlugPipe to demonstrate:

        - ‚úÖ Real GitHub API integration

        - ‚úÖ Automated issue creation and management

        - ‚úÖ Production-ready workflow automation

        - ‚úÖ Cross-platform integration capabilities


        **Automation Details:**

        - Created: {{timestamp}}

        - Repository: {{repo_owner}}/{{repo_name}}

        - PlugPipe Version: 1.0.0


        ## Next Steps

        This showcase will:

        1. Create automated documentation

        2. Set up security scanning

        3. Configure monitoring webhooks

        4. Implement CI/CD integration


        _This is a demonstration of PlugPipe''s enterprise automation capabilities._

        '
      labels:
      - automation
      - plugpipe
      - showcase
      - bot
      assignees:
      - plugpipe-bot
  outputs:
    issue_number: '{{github_result.number}}'
    issue_url: '{{github_result.html_url}}'
  id: step_2
  uses: name
  with: {}
- name: update_automation_docs
  plug: github_integration
  config:
    auth_method: token
    token: '{{github_token}}'
  inputs:
    operation: create_file
    owner: '{{repo_owner}}'
    repo: '{{repo_name}}'
    path: docs/PLUGPIPE_AUTOMATION.md
    content: '# PlugPipe Automation Documentation


      ## Overview

      This repository uses PlugPipe for automated GitHub workflows and DevOps processes.


      ## Automation Features


      ### ü§ñ Issue Management

      - Automatic issue creation and labeling

      - Smart issue assignment and prioritization

      - Automated issue lifecycle management


      ### üìÅ Repository Management

      - Automated documentation updates

      - Security scanning integration

      - Code quality monitoring


      ### üîß CI/CD Integration

      - Automated pull request workflows

      - Deployment pipeline integration

      - Quality gate enforcement


      ### üìä Monitoring & Alerting

      - Real-time repository health monitoring

      - Slack integration for team notifications

      - Prometheus metrics collection


      ## Recent Automation Activity


      **Last Run:** {{timestamp}}

      **Issue Created:** #{{issue_number}}

      **Status:** ‚úÖ Operational


      ## Configuration


      PlugPipe automation is configured through:

      - Repository webhooks

      - GitHub Actions integration

      - Slack notification channels

      - Prometheus monitoring endpoints


      ## Support


      For automation support or questions:

      - Create an issue with label `automation`

      - Contact: plugpipe-support@example.com

      - Documentation: https://docs.plugpipe.com


      ---

      _Generated by PlugPipe GitHub Automation v1.0.0_

      '
    commit_data:
      message: üìù Update PlugPipe automation documentation - {{timestamp}}
      branch: main
      committer:
        name: PlugPipe Bot
        email: bot@plugpipe.com
  outputs:
    doc_commit: '{{github_result.commit.sha}}'
  id: step_3
  uses: name
  with: {}
- name: setup_automation_webhook
  plug: github_integration
  config:
    auth_method: token
    token: '{{github_token}}'
  inputs:
    operation: create_webhook
    owner: '{{repo_owner}}'
    repo: '{{repo_name}}'
    webhook_data:
      name: web
      active: true
      events:
      - issues
      - pull_request
      - push
      - release
      config:
        url: https://automation.plugpipe.com/github/webhook
        content_type: json
        secret: ${WEBHOOK_SECRET}
        insecure_ssl: '0'
  outputs:
    webhook_id: '{{github_result.id}}'
    webhook_url: '{{github_result.config.url}}'
  id: step_4
  uses: name
  with: {}
- name: create_security_checklist
  plug: github_integration
  config:
    auth_method: token
    token: '{{github_token}}'
  inputs:
    operation: create_issue
    owner: '{{repo_owner}}'
    repo: '{{repo_name}}'
    issue_data:
      title: üîí Security Checklist - PlugPipe Integration
      body: "# Security Integration Checklist\n\nPlugPipe has been integrated with\
        \ enhanced security monitoring:\n\n## ‚úÖ Completed\n- [x] Repository access\
        \ validation\n- [x] Webhook security configuration  \n- [x] Documentation\
        \ automation\n- [x] Issue tracking setup\n\n## \U0001F504 In Progress\n- [\
        \ ] Trivy security scanning integration\n- [ ] Vault secret management setup\n\
        - [ ] Docker container security monitoring\n- [ ] Prometheus security metrics\n\
        \n## \U0001F4CB Next Steps\n- [ ] Enable branch protection rules\n- [ ] Configure\
        \ security policies\n- [ ] Set up automated security scans\n- [ ] Implement\
        \ compliance reporting\n\n**Security Contact:** security@plugpipe.com\n**Incident\
        \ Response:** https://security.plugpipe.com/incident\n\n_This security checklist\
        \ is automatically maintained by PlugPipe._\n"
      labels:
      - security
      - checklist
      - automation
      assignees:
      - security-team
  outputs:
    security_issue: '{{github_result.number}}'
  id: step_5
  uses: name
  with: {}
- name: notify_slack
  plug: slack_messaging
  config:
    webhook_url: '{{slack_webhook}}'
    channel: '#devops-automation'
  inputs:
    operation: send_message
    message: "\U0001F680 **PlugPipe GitHub Automation Showcase Complete!**\n\n**Repository:**\
      \ {{repo_owner}}/{{repo_name}}\n**Issues Created:** \n- \U0001F916 Automation\
      \ Issue: #{{issue_number}}\n- \U0001F512 Security Checklist: #{{security_issue}}\n\
      \n**Documentation:** Updated automation docs\n**Webhook:** Configured for real-time\
      \ events\n**Status:** ‚úÖ Fully Operational\n\n**Next:** Repository is now fully\
      \ integrated with PlugPipe automation!\n\n<{{issue_url}}|View Automation Issue>\
      \ | <https://github.com/{{repo_owner}}/{{repo_name}}|View Repository>\n"
  outputs:
    slack_response: '{{slack_result}}'
  id: step_6
  uses: name
  with: {}
- name: enable_monitoring
  plug: monitoring_prometheus
  config:
    prometheus_url: http://prometheus:9090
    job_name: github_automation
  inputs:
    operation: record_metric
    metric_name: plugpipe_github_automation_success
    metric_value: 1
    labels:
      repository: '{{repo_owner}}/{{repo_name}}'
      automation_type: showcase
      timestamp: '{{timestamp}}'
  outputs:
    monitoring_status: '{{prometheus_result}}'
  id: step_7
  uses: name
  with: {}
summary:
  format: table
  doc: Pipeline execution summary for github-repository-automation-showcase
copyright:
  owner: PlugPipe Team
  year: 2025
  notice: Copyright ¬© 2025 PlugPipe Team. All rights reserved.
license: MIT
license_url: https://opensource.org/licenses/MIT
spdx_license_identifier: MIT
